syntax = "proto3";
package v1;
option go_package = "/pkg/api/v1";

import "google/protobuf/timestamp.proto";

message CarCreateRequest{
  string model = 2; // car model;
  string carNumber = 3; // number of the car;
  google.protobuf.Timestamp productionYear = 4; // year when the car was made;
  float location = 5; // field which should be updated on a specified time interval;
  Status status = 7; // car status;
  Type  carType = 8; // car type;
}

message CarCreateResponse{
  Car createdCar = 1;
}

message FindCarRequest{
  Status status = 1;
  Type  carType = 2;
  float location = 3;
}

message FindCarResponse{
  Car foundCar = 1;
}



message UpdateCarRequest{
  uint64 id = 1; // car id;
  string model = 2; // car model;
  string carNumber = 3; // number of the car;
}

message CarUpdateResponse{}

message CarDeleteRequest{
  string CardID = 1;
}

message CarDeleteResponse{}



//SET METHODS:

message SetCarStatusRequest{
  string CarID = 1;
  Status status = 2;
}

//empty message
message SetCarStatusResponse{}

message SetDriverRequest{
  string CarID = 1;
  string DriverID = 2;
}

//empty message
message SetDriverResponse{}


message SetCarTypeRequest{
  Type carType = 1;
  string CarID = 2;
}

message SetCarTypeResponse{}


// Object which handle the car information;
message Car{
  string id = 1; // car id;
  string model = 2; // car model;
  string carNumber = 3; // number of the car;
  google.protobuf.Timestamp productionYear = 4; // year when the car was made;
  float location = 5; // field which should be updated on a specified time interval;
  string driverID = 6; // maybe unnecessary but let's add;
  Status status = 7; // car status;
  Type  carType = 8; // car type;
}

// Object which handle information about car status;
enum Status {
  UnknownStatus = 0;
  Free = 1;
  Paused = 2;
  ExecutingOrder = 3;
}

enum Type {
  UnknownType = 0;
  Standard = 1;
  Comfort = 2;
}



service CarService {
  // Create a car instance;
  rpc Create(CarCreateRequest) returns (CarCreateResponse);

  // Delete a car instance;
  rpc Delete(CarDeleteRequest) returns (CarDeleteResponse);

  //Find a car instance;
  rpc Find(FindCarRequest) returns (FindCarResponse);

  //Update car instance;
  rpc Update(UpdateCarRequest) returns (CarUpdateResponse);

  //SetStatus set status of a car instance;
  rpc SetStatus(SetCarStatusRequest) returns (SetCarStatusResponse);

  rpc SetType(SetCarTypeRequest) returns (SetCarTypeResponse);
}
